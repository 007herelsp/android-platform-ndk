#include <Python.h>
#include <osdefs.h>

static char EMPTY_STR[1] = {0};
static char prog_path[MAXPATHLEN+1] = {0};
static char* module_search_path = NULL;
static int calculated = 0;

static char* prefix = EMPTY_STR;
static char* exec_prefix = EMPTY_STR;

static void eval_full_path_of_executable()
{
    char* preset_progpath = Py_GetProgramName();
    if (preset_progpath && (preset_progpath[0] == '/'))
    {
        strcpy(prog_path, preset_progpath);
        return;
    }
    int size = readlink("/proc/self/exe", prog_path, MAXPATHLEN);
    if (size < 0)
        size = 0;
    prog_path[size] = 0;
}

#ifdef Py_ENABLE_SHARED

static int is_file(const char* filename)
{
    struct stat buf;
    if (stat(filename, &buf) != 0)
        return 0;
    if (!S_ISREG(buf.st_mode))
        return 0;
    return 1;
}

static int is_dir(const char* filename)
{
    struct stat buf;
    if (stat(filename, &buf) != 0)
        return 0;
    if (!S_ISDIR(buf.st_mode))
        return 0;
    return 1;
}

static void eval_dirname_of_this_dso(char* dso_path)
{
    /* For some android platforms dladdr() doesn't work properly, so just scan '/proc/self/maps' directly */

    void* self = &eval_dirname_of_this_dso;
    FILE *stream = NULL;
    char *line = NULL;
    size_t len = 0;
    ssize_t read;
    int ret = 1;
    int i;
    void* addr1;
    void* addr2;
    char perm[64];
    char offset[64];
    char device[64];
    char inode[64];
    char path[MAXPATHLEN + 1];

    stream = fopen("/proc/self/maps", "r");
    if (stream != NULL)
    {
        while ((read = getline(&line, &len, stream)) != -1)
        {
            if ((7 == sscanf(line, "%p-%p %s %s %s %s %s", &addr1, &addr2, perm, offset, device, inode, path)) && (path[0] == '/'))
            {
                if ((addr1 <= self) && (self < addr2))
                {
                    strncpy(dso_path, path, MAXPATHLEN);
                    ret = 0;
                    break;
                }
            }
        }
        free(line);
        fclose(stream);
    }
    if (ret)
    {
        Py_FatalError("Cannot eval dirname of dso from '/proc/self/maps'");
    }
    for (i = strlen(dso_path); i >= 0; --i)
    {
        if (dso_path[i] == '/')
        {
            dso_path[i + 1] = 0;
            break;
        }
    }
}

static void calculate_path(void)
{
    eval_full_path_of_executable();

    char dso_dir_path[MAXPATHLEN + 1];
    eval_dirname_of_this_dso(dso_dir_path);

    char exe_dir_path[MAXPATHLEN + 1];
    strcpy(exe_dir_path, prog_path);
    int i = strlen(exe_dir_path);
    for (; i >= 0; --i)
    {
        if (exe_dir_path[i] == '/')
        {
            exe_dir_path[i + 1] = 0;
            break;
        }
    }

    char stdlib_zip_fname[32];
    char stdlib_zip_path[MAXPATHLEN + 1];
    snprintf(stdlib_zip_fname, 32, "python%d%d.zip", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    strcpy(stdlib_zip_path, dso_dir_path);
    strcat(stdlib_zip_path, stdlib_zip_fname);
    if (!is_file(stdlib_zip_path))
    {
        char error_message[2*MAXPATHLEN];
        sprintf(error_message, "stdlib not found by path '%s'", stdlib_zip_path);
        Py_FatalError(error_message);
    }

    char modules_path[MAXPATHLEN + 1];
    strcpy(modules_path, exe_dir_path);
    strcat(modules_path, "modules");
    int have_modules_dir = is_dir(modules_path);

    size_t search_path_len = 1 + strlen(stdlib_zip_path);
    if (have_modules_dir)
    {
        search_path_len += 1 + strlen(modules_path);
    }

    char delim[2] = {DELIM, 0};
    module_search_path = (char*)malloc(search_path_len);
    strcpy(module_search_path, stdlib_zip_path);

    if (have_modules_dir)
    {
        if (module_search_path[0])
            strcat(module_search_path, delim);
        strcat(module_search_path, modules_path);
    }

    calculated = 1;
}

#else

static void calculate_path(void)
{
    eval_full_path_of_executable();
    module_search_path = EMPTY_STR;
    calculated = 1;
}

#endif /*Py_ENABLE_SHARED*/


/* External interface */

char *
Py_GetPath(void)
{
    if (!calculated)
        calculate_path();
    return module_search_path;
}

char *
Py_GetPrefix(void)
{
    if (!calculated)
        calculate_path();
    return prefix;
}

char *
Py_GetExecPrefix(void)
{
    if (!calculated)
        calculate_path();
    return exec_prefix;
}

char *
Py_GetProgramFullPath(void)
{
    if (!calculated)
        calculate_path();
    return prog_path;
}
